## template: jinja
#cloud-config

# cloud-init file used to initialize VPS.
# See documentation: https://cloudinit.readthedocs.io/en/latest/reference/modules.html
#
# You can paste this file in the host's web UI when creating a VPS.
#
# Execution logs are available at `/var/log/cloud-init-output.log`, with
# additional logging available in `/var/log/cloud-init.log`.
#
# Check that execution was successful by running:
# `grep "setup script ran successfully" /var/log/cloud-init-output.log`.

{% set SSH_KEY = '
Paste VPS private SSH key here!
The corresponding public key should be given read access to relevant repos.
' %}

timezone: UTC
ssh_pwauth: false
disable_root: true

users:
  - name: bernardo
    sudo: ALL=(ALL) NOPASSWD:ALL
    groups: sudo
    shell: /bin/bash
    ssh_authorized_keys:
      - "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIBesw1jrqTa2CepHsk35RX1wZeT5CCM1hBgbS8KDLS9D bfar97@gmail.com"
  - name: marcos
    sudo: ALL=(ALL) NOPASSWD:ALL
    groups: sudo
    shell: /bin/bash
    ssh_authorized_keys:
      - "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIGJ2vrIhoGkV+8kath2C3utUJ8zymmascDMWpLQs1Yrr email@marcospereira.me"
  # SSH key that github uses to SSH into the machine to deploy.
  - name: github
    sudo: ALL=(ALL) NOPASSWD:ALL
    groups: sudo
    shell: /bin/bash
    ssh_authorized_keys:
      - "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIDR7JRuR3FgsI2RRqtb5mS00jO/emFGS0cyM3M1n6Up2 github"

write_files:
  - path: /home/github/.ssh/id_ed25519
    # Multiline variables indented by 6 spaces to avoid breaking yaml syntax.
    content: |
      {{ SSH_KEY | indent(6) }}
    owner: github:github
    permissions: "0600"

  # Write commands into a bash script so that we can run them with bash explicitly ("runcmd"
  # commands may use a different shell).
  # Written to /run/ instead of /tmp/ as per
  # https://cloudinit.readthedocs.io/en/latest/reference/modules.html#runcmd
  - path: /run/vps-setup.sh
    permissions: "0700" # Executable
    content: |
      #!/bin/bash

      set -euxo pipefail

      printf "\n\n ========> Update packages \n\n"
      apt update -y
      # Same as apt upgrade but will add & remove packages as appropriate.
      apt dist-upgrade -y

      printf "\n\n ========> unattended-upgrades \n\n"
      apt install -y unattended-upgrades

      cat <<EOF > /etc/apt/apt.conf.d/20auto-upgrades
      APT::Periodic::Update-Package-Lists "1";
      APT::Periodic::Unattended-Upgrade "1";
      EOF

      cat <<EOF > /etc/apt/apt.conf.d/50unattended-upgrades
      Unattended-Upgrade::Allowed-Origins {
        "\${distro_id}:\${distro_codename}-security";
        "\${distro_id}:\${distro_codename}-updates";
      };
      Unattended-Upgrade::Automatic-Reboot "true";
      EOF

      systemctl enable --now unattended-upgrades

      printf "\n\n ========> Fail2ban \n\n"
      apt install -y fail2ban
      systemctl enable fail2ban
      systemctl start fail2ban

      printf "\n\n ========> Firewall \n\n"
      ufw allow OpenSSH
      ufw --force enable

      printf "\n\n ========> Docker \n\n"

      # Steps copied from https://docs.docker.com/engine/install/ubuntu/
      # (removed sudo )

      # Add Docker's official GPG key:
      apt-get update
      apt-get install -y ca-certificates curl
      install -m 0755 -d /etc/apt/keyrings
      curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
      chmod a+r /etc/apt/keyrings/docker.asc

      # Add the repository to Apt sources:
      echo \
        "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
        $(. /etc/os-release && echo "${UBUNTU_CODENAME:-$VERSION_CODENAME}") stable" | \
        tee /etc/apt/sources.list.d/docker.list > /dev/null
      apt-get update

      apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

      systemctl enable --now docker

      printf "\n\n ========> Disable root user \n\n"
      passwd -l root

      printf "\n\n ========> setup script ran successfully \n\n"

runcmd:
  - "bash /run/vps-setup.sh"
  - "rm /run/vps-setup.sh"
